<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CrashDialogContent" xml:space="preserve">
    <value>An error occured while trying to do what you where doing and I didn't handle it properly, so here we are.

If you let me, I can send an error report to my developers to help them figure out what went wrong, and fix it.

What do you want to do?</value>
  </data>
  <data name="CrashDialogDontSend" xml:space="preserve">
    <value>Close the program</value>
  </data>
  <data name="CrashDialogInstruction" xml:space="preserve">
    <value>Something's gone horribly wrong!</value>
  </data>
  <data name="CrashDialogSendReport" xml:space="preserve">
    <value>Send an error report and close the program</value>
  </data>
  <data name="CrashDialogTitle" xml:space="preserve">
    <value>Beeper has Crashed!</value>
  </data>
  <data name="DontAskMeAgain" xml:space="preserve">
    <value>Don't ask me again.</value>
  </data>
  <data name="ExceptionOccured" xml:space="preserve">
    <value>{0} occurred!</value>
  </data>
  <data name="GUICantFindCLI" xml:space="preserve">
    <value>I can't find the file needed to launch the Beeper CLI. You're going to have to find and run it yourself. Sorry!</value>
  </data>
  <data name="GUICantFindCLIInstruction" xml:space="preserve">
    <value>Whoops!</value>
  </data>
  <data name="GUICantFindCLITitle" xml:space="preserve">
    <value>I couldn't find that!</value>
  </data>
  <data name="GUISettingsReset" xml:space="preserve">
    <value>Settings reset successfully!</value>
  </data>
  <data name="GUISettingsResetTitle" xml:space="preserve">
    <value>Settings Reset!</value>
  </data>
  <data name="GUIUnableToWriteConfig" xml:space="preserve">
    <value>Sorry! I need to write a configuration file to save some settings, but I can't because the folder I'm currently in is write protected.
Can I relaunch as administrator and try again?</value>
  </data>
  <data name="GUIUnableToWriteConfigInstruction" xml:space="preserve">
    <value>Unable to write configuration file.</value>
  </data>
  <data name="GUIUnableToWriteConfigTitle" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="GUIWarningInstruction" xml:space="preserve">
    <value>Beeper Experimental GUI</value>
  </data>
  <data name="GUIWarningMessage" xml:space="preserve">
    <value>It looks like you're trying to run the Beeper GUI. This shouldn't be an issue, but I have some problems I should probably warn you about.

Currently, I'm highly experimental and very messy. I doesn't work anywhere near properly, will almost definitely crash and probably destroy some of your data/hard work.

I'm also very likely to change in huge ways over the next few months with features being added, removed or just moved around.

I recommend you continue to use the CLI until further notice.

What do you want to do?</value>
  </data>
  <data name="GUIWarningTitle" xml:space="preserve">
    <value>Experimental GUI</value>
  </data>
  <data name="HideStackTrace" xml:space="preserve">
    <value>Hide Stack Trace</value>
  </data>
  <data name="Privacy" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="RelaunchAsAdministrator" xml:space="preserve">
    <value>OK, Relaunch as Administrator.</value>
  </data>
  <data name="RunCLI" xml:space="preserve">
    <value>OK, Run the CLI.</value>
  </data>
  <data name="RunGUI" xml:space="preserve">
    <value>I don't care! Proceed to the GUI!</value>
  </data>
  <data name="ShowDetails" xml:space="preserve">
    <value>Show Details</value>
  </data>
  <data name="ShowStackTrace" xml:space="preserve">
    <value>Show Stack Trace</value>
  </data>
</root>